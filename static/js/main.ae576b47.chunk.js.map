{"version":3,"sources":["components/TextForm.js","components/About.js","components/Alert.js","images/site-logo2.png","components/Navbar2.js","App.js","reportWebVitals.js","index.js"],"names":["TextForm","props","useState","text","setText","className","style","color","mode","heading","value","onChange","event","target","backgroundColor","id","rows","onClick","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","About","myStyle","setMyStyle","btnText","setBtnText","type","Alert","alert","role","msg","Navbar2","to","src","logo","alt","toggleMode","htmlFor","buttonText","fontWeight","App","setMode","setButtonText","setAlert","showAlert","message","setTimeout","title","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2NAEe,SAASA,EAASC,GAC7B,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA0CA,OACI,mCACI,sBAAKC,UAAU,YAAf,UACI,sBAAKA,UAAU,YAAf,UACI,oBAAIC,MAAO,CAAEC,MAAsB,SAAfN,EAAMO,KAAkB,QAAU,WAAtD,SAAoEP,EAAMQ,UAC1E,qBAAKJ,UAAU,OAAf,SACI,0BAAUA,UAAU,eAAeK,MAAOP,EAAMQ,SA1B7C,SAACC,GAEpBR,EAAQQ,EAAMC,OAAOH,QAwBqEJ,MAAO,CAAEQ,gBAAgC,SAAfb,EAAMO,KAAkB,OAAS,QAASD,MAAsB,SAAfN,EAAMO,KAAkB,QAAU,WAAaO,GAAG,QAAQC,KAAK,QAExN,wBAAQX,UAAU,uBAAuBY,QAhDnC,WAElB,IAAIC,EAAUf,EAAKgB,cACnBf,EAAQc,IA6CI,kCACA,wBAAQb,UAAU,uBAAuBY,QA3CnC,WAElB,IAAIC,EAAUf,EAAKiB,cACnBhB,EAAQc,IAwCI,kCACA,wBAAQb,UAAU,uBAAuBY,QAtChC,WAGrBb,EADc,KAoCF,wBACA,wBAAQC,UAAU,uBAAuBY,QA1BtC,WACf,IAAId,EAAOkB,SAASC,eAAe,SACnCnB,EAAKoB,SACLC,UAAUC,UAAUC,UAAUvB,EAAKO,QAuBvB,uBACA,wBAAQL,UAAU,uBAAuBY,QArB/B,WACtB,IAAIC,EAAUf,EAAKwB,MAAM,QACzBvB,EAAQc,EAAQU,KAAK,OAmBT,oCAEJ,qBAAKvB,UAAU,iBAAf,SACI,sBAAKA,UAAU,iBAAiBC,MAAO,CAAEC,MAAsB,SAAfN,EAAMO,KAAkB,QAAU,WAAlF,UACI,mDACA,8BAAIL,EAAKwB,MAAM,KAAKE,OAApB,cAAuC1B,EAAK0B,OAA5C,iBACA,8BAAI,KAAQ1B,EAAKwB,MAAM,KAAKE,OAA5B,mBACA,yCACA,4BAAI1B,EAAK0B,OAAS,EAAI1B,EAAO,sEC/DtC,SAAS2B,IAEpB,MAA8B5B,mBAAS,CACnCK,MAAO,QACPO,gBAAiB,UAFrB,mBAAOiB,EAAP,KAAgBC,EAAhB,KAKA,EAA8B9B,mBAAS,oBAAvC,mBAAO+B,EAAP,KAAgBC,EAAhB,KAsBA,OACI,sBAAK7B,UAAU,iBAAf,UACI,sBAAKA,UAAU,YAAYU,GAAG,mBAA9B,UACI,sBAAKV,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBU,GAAG,aAApC,SACI,wBAAQV,UAAU,mBAAmB8B,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAA9I,iCAIJ,qBAAKpB,GAAG,cAAcV,UAAU,mCAAmC,kBAAgB,aAAa,iBAAe,oBAA/G,SACI,sBAAKA,UAAU,iBAAf,UACI,8EADJ,oXAC8a,mDAD9a,uDAKR,sBAAKA,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBU,GAAG,aAApC,SACI,wBAAQV,UAAU,6BAA6B8B,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAzJ,iCAIJ,qBAAKpB,GAAG,cAAcV,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAA1G,SACI,sBAAKA,UAAU,iBAAf,UACI,+EADJ,sXACib,mDADjb,uDAKR,sBAAKA,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBU,GAAG,eAApC,SACI,wBAAQV,UAAU,6BAA6B8B,KAAK,SAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAA3J,iCAIJ,qBAAKpB,GAAG,gBAAgBV,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAA9G,SACI,sBAAKA,UAAU,iBAAf,UACI,8EADJ,sXACgb,mDADhb,0DAQZ,wBAAQA,UAAU,uBAAuBY,QA9D7B,WACM,UAAlBc,EAAQxB,OACRyB,EAAW,CACPzB,MAAO,QACPO,gBAAiB,UAErBoB,EAAW,uBAGXF,EAAW,CACPzB,MAAO,QACPO,gBAAiB,UAErBoB,EAAW,sBAiDX,SAAgED,O,kBCrE7D,SAASG,EAAMnC,GAE1B,OAEIA,EAAMoC,OAAS,sBAAKhC,UAAS,8BAAyBJ,EAAMoC,MAAMF,MAAQG,KAAK,QAAQvB,GAAG,QAA3E,UACVd,EAAMoC,MAAMF,KADF,IACSlC,EAAMoC,MAAME,OCT7B,UAA0B,uCCI1B,SAASC,EAAQvC,GAC9B,OACE,mCACE,qBACEI,UAAS,yCACQ,UAAfJ,EAAMO,KAAmB,OAAS,QAD3B,eAEa,SAAfP,EAAMO,KAAkB,UAAY,QAH7C,SAKE,sBAAKH,UAAU,kBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,eAAeoC,GAAG,IAAlC,SACE,qBAAKC,IAAKC,EAAMC,IAAI,WAAW7B,GAAG,eAEpC,sBACEV,UAAU,yBACVC,MAAO,CAAEC,MAAsB,SAAfN,EAAMO,KAAkB,QAAU,SAFpD,UAIE,uBACEH,UAAU,mBACV8B,KAAK,WACLpB,GAAG,yBACHE,QAAShB,EAAM4C,aAEjB,uBACExC,UAAU,mBACVyC,QAAQ,yBAFV,SAIG7C,EAAM8C,gBAGX,wBACE1C,UAAU,iBACV8B,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAM9B,UAAU,0BAElB,qBAAKA,UAAU,2BAA2BU,GAAG,yBAA7C,SACE,qBAAIV,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CACEA,UAAU,WACVoC,GAAG,IACHnC,MAAO,CACLC,MAAsB,SAAfN,EAAMO,KAAkB,MAAQ,QACvCwC,WAAY,UALhB,oBAWF,oBAAI3C,UAAU,WAAd,SACE,cAAC,IAAD,CACEA,UAAU,WACVoC,GAAG,SACHnC,MAAO,CACLC,MAAsB,SAAfN,EAAMO,KAAkB,MAAQ,QACvCwC,WAAY,UALhB,iCCmBDC,MA7Df,WACE,MAAwB/C,mBAAS,SAAjC,mBAAOM,EAAP,KAAa0C,EAAb,KACA,EAAoChD,mBAAS,oBAA7C,mBAAO6C,EAAP,KAAmBI,EAAnB,KAkBA,EAA0BjD,mBAAS,MAAnC,mBAAOmC,EAAP,KAAce,EAAd,KACIC,EAAY,SAACC,EAASnB,GACxBiB,EAAS,CACPb,IAAKe,EACLnB,KAAMA,IAERoB,YAAW,WACTH,EAAS,QACR,OASL,OACE,mCACE,eAAC,IAAD,WACE,cAACZ,EAAD,CAASgB,MAAM,YAAYhD,KAAMA,EAAMqC,WArC1B,WAEJ,UAATrC,GACF0C,EAAQ,QACR7B,SAASoC,KAAKnD,MAAMQ,gBAAkB,QACtCqC,EAAc,qBACdE,EAAU,8BAA+B,cAGzCH,EAAQ,SACR7B,SAASoC,KAAKnD,MAAMQ,gBAAkB,QACtCqC,EAAc,oBACdE,EAAU,+BAAgC,cAyBuBN,WAAYA,IAC3E,cAACX,EAAD,CAAOC,MAAOA,IACd,qBAAKhC,UAAU,iBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqD,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC3D,EAAD,CAAUqD,UAAWA,EAAW5C,QAAQ,kCAAkCD,KAAMA,MAElF,cAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,SAAlB,SACE,cAAC7B,EAAD,iBCrDC8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlD,SAASC,eAAe,SAM1BsC,M","file":"static/js/main.ae576b47.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n\r\n    const handleUpClick = () => {\r\n        // console.log(\"UpperCase clicked \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        // console.log(\"UpperCase clicked \" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        // console.log(\"UpperCase clicked \" + text);\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n\r\n\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(' '))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"container\">\r\n                    <h1 style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>{props.heading}</h1>\r\n                    <div className=\"mb-3\">\r\n                        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : '#042743' }} id=\"myBox\" rows=\"8\"></textarea>\r\n                    </div>\r\n                    <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                    <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                    <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n                    <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n                    <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                </div>\r\n                <div className=\"container my-3\">\r\n                    <div className=\"container my-3\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                        <h2>Your text summary</h2>\r\n                        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n                        <h2>Preview</h2>\r\n                        <p>{text.length > 0 ? text : \"Enter something in the textbox above to preview it here\"}</p>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    });\r\n\r\n    const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n    const toggleStyle = () => {\r\n        if (myStyle.color === 'black') {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            });\r\n            setBtnText('Enable Light Mode')\r\n        }\r\n        else {\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            });\r\n            setBtnText('Enable Dark Mode');\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container my-2\">\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNames control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <button className=\"btn btn-primary my-1\" onClick={toggleStyle}>{btnText}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\n\r\nexport default function Alert(props) {\r\n\r\n    return (\r\n\r\n        props.alert && <div className={`alert alert-primary ${props.alert.type}`} role=\"alert\" id='alert'>\r\n            {props.alert.type}:{props.alert.msg}\r\n\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/site-logo2.20a9d48a.png\";","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"../images/site-logo2.png\";\r\n\r\nexport default function Navbar2(props) {\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${\r\n          props.mode === \"light\" ? \"dark\" : \"light\"\r\n        } bg-${props.mode === \"dark\" ? \"success\" : \"dark\"}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            <img src={logo} alt=\"no sorry\" id=\"top-logo\" />\r\n          </Link>\r\n          <div\r\n            className=\"form-check form-switch\"\r\n            style={{ color: props.mode === \"dark\" ? \"black\" : \"white\" }}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              {props.buttonText}\r\n            </label>\r\n          </div>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link\r\n                  className=\"nav-link\"\r\n                  to=\"/\"\r\n                  style={{\r\n                    color: props.mode === \"dark\" ? \"red\" : \"white\",\r\n                    fontWeight: \"bolder\",\r\n                  }}\r\n                >\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link\r\n                  className=\"nav-link\"\r\n                  to=\"/about\"\r\n                  style={{\r\n                    color: props.mode === \"dark\" ? \"red\" : \"white\",\r\n                    fontWeight: \"bolder\",\r\n                  }}\r\n                >\r\n                  About\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n","import './App.css';\n// import Navbar from './components/Navbar.js';\nimport TextForm from './components/TextForm.js';\nimport About from './components/About.js';\nimport React, { useState } from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Alert from './components/Alert';\nimport Navbar2 from './components/Navbar2';\n// import Practice from './components/Practice';\n\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [buttonText, setButtonText] = useState(\"Enable Dark Mode\")\n  const toggleMode = () => {\n    // console.log(\"toggle mode is called\");\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'black';\n      setButtonText(\"Enable Light mode\");\n      showAlert(\" Dark Mode has been enabled\", \" Success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      setButtonText(\"Enable Dark Mode\")\n      showAlert(\" Light Mode has been enabled\", \" Success\");\n    }\n  }\n\n\n  const [alert, setAlert] = useState(null);\n  let showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null)\n    }, 1800);\n  }\n\n\n\n\n\n\n\n  return (\n    <>\n      <Router>\n        <Navbar2 title=\"TextUtils\" mode={mode} toggleMode={toggleMode} buttonText={buttonText} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/\">\n              <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n            </Route>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n          </Switch>\n\n        </div>\n\n\n\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}